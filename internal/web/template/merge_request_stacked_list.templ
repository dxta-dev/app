package template

import (
		"github.com/dxta-dev/app/internal/web/data"
	"strings"
	"fmt"
)

type MergeRequestStackedListProps struct {
	Id                string
	Title             string
	MergeRequests     []data.MergeRequestListItemData
	MRStatusIconProps MRStatusIconProps
}

var MRWaitingToBeReviewedIconProps = MRStatusIconProps{
	SVGProps: SVGProps{
		Id:     "mr-waiting-to-be-reviewed-icon",
		Width:  16,
		Height: 16,
	},
	MRStatus: WaitingToBeReviewed,
}

var MRReadyToBeMergedIconProps = MRStatusIconProps{
	SVGProps: SVGProps{
		Id:     "mr-ready-to-be-merged-icon",
		Width:  16,
		Height: 16,
	},
	MRStatus: ReadyToBeMerged,
}

var MRInProgressIconProps = MRStatusIconProps{
	SVGProps: SVGProps{
		Id:     "mr-in-progress-icon",
		Width:  16,
		Height: 16,
	},
	MRStatus: InProgress,
}

var MRMergedIconProps = MRStatusIconProps{
	SVGProps: SVGProps{
		Id:     "mr-merged-icon",
		Width:  16,
		Height: 16,
	},
	MRStatus: Merged,
}

var MRClosedIconProps = MRStatusIconProps{
	SVGProps: SVGProps{
		Id:     "mr-closed-icon",
		Width:  16,
		Height: 16,
	},
	MRStatus: Closed,
}

var MRStaleIconProps = MRStatusIconProps{
	SVGProps: SVGProps{
		Id:     "mr-stale-icon",
		Width:  16,
		Height: 16,
	},
	MRStatus: Stale,
}

var SeparatorIconProps = SVGProps{
	Id:     "separator-icon",
	Width:  2,
	Height: 2,
}

func generateCircleActors(actors []data.ListUserInfo) string {
	var circleActors []string
	for i, actor := range actors {
		if i >= 5 {
			circleActors = append(circleActors, actor.Name)
		}
	}
	return strings.Join(circleActors, "\n")
}

templ mergeRequestStackIcons() {
	<div class="hidden">
		@MRStatusIcon(MRWaitingToBeReviewedIconProps)
		@MRStatusIcon(MRReadyToBeMergedIconProps)
		@MRStatusIcon(MRInProgressIconProps)
		@MRStatusIcon(MRMergedIconProps)
		@MRStatusIcon(MRClosedIconProps)
		@MRStatusIcon(MRStaleIconProps)
		@SeparatorIcon(SeparatorIconProps)
	</div>
}

templ mergeRequestStack(id int64, title string, mrUrl string, canonId int64, actors []data.ListUserInfo, codeAdditions int64, codeDeletions int64, reviewDepth int64, mrStatusIconProps MRStatusIconProps, lastEventTimestamp int64, minimapState string, repo data.RepositoryInfo, circleActors string) {
	<li class="flex flex-wrap items-center justify-between gap-x-6 gap-y-4 py-3 m-2 sm:flex-nowrap" data-stack-list-item>
		<div class="pl-2">
			<button type="button" popovertarget="mr-info" hx-get={ fmt.Sprintf("/mr-info/%v", id) } hx-target="#mr-info" class="hover:underline" data-merge-request-id={ fmt.Sprintf("%v", id) } data-last-event-timestamp={ fmt.Sprintf("%v", lastEventTimestamp) } data-minimap-indicator={ fmt.Sprintf("%v", minimapState) }>
				<p class="text-sm font-semibold leading-6 text-gray-900">
					{ title }
				</p>
			</button>
			<div class="mt-1 flex items-center gap-x-2 text-xs leading-5 text-gray-500">
				@UseMRStatusIcon(mrStatusIconProps)
				@UseSeparatorIcon(SeparatorIconProps)
				<p>
					<a href={ templ.SafeURL(fmt.Sprintf("https://github.com/%v/%v", repo.Org, repo.Name)) } class="hover:underline">{repo.Org}/{repo.Name}</a>
				</p>
				@UseSeparatorIcon(SeparatorIconProps)
				<p>
					<span class="sr-only">External pull request</span>
					<a href={ templ.SafeURL(mrUrl) } class="hover:underline">#{ fmt.Sprintf("%v", canonId) }</a>
				</p>
				@UseSeparatorIcon(SeparatorIconProps)
				<div>
					<span class="sr-only">Code additions</span>
					<p class="text-lime-700 select-none" title="Code additions">+{ fmt.Sprintf("%v", codeAdditions) }</p>
				</div>
				<div>
					<span class="sr-only">Code deletions</span>
					<p class="text-red-700 select-none" title="Code deletions">-{ fmt.Sprintf("%v", codeDeletions) }</p>
				</div>
			</div>
		</div>
		<dl class="flex w-full flex-none justify-between gap-x-8 sm:w-auto">
			@avatarComponent(actors, circleActors)
			<div class="flex w-16 gap-x-2.5">
				<dt>
					<span class="sr-only">Review depth</span>
					<svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
						<path stroke-linecap="round" stroke-linejoin="round" d="M2.25 12.76c0 1.6 1.123 2.994 2.707 3.227 1.087.16 2.185.283 3.293.369V21l4.076-4.076a1.526 1.526 0 011.037-.443 48.282 48.282 0 005.68-.494c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z"></path>
					</svg>
				</dt>
				<dd class="text-sm leading-6 text-gray-900">{ fmt.Sprintf("%v", reviewDepth) }</dd>
			</div>
		</dl>
	</li>
}

templ mergeRequestStackedList(props MergeRequestStackedListProps) {
	if len(props.MergeRequests) != 0 {
		<div id={ props.Id }>
			<div class="border-b border-gray-200 pb-3 pt-3 bg-white sticky top-[380px]">
				<div class="flex flex-wrap items-baseline">
					<div class="text-base font-semibold leading-6 text-gray-900">{ props.Title }</div>
				</div>
			</div>
			<ul role="list" class="divide-y divide-gray-100">
				for _, mr := range props.MergeRequests {
					@mergeRequestStack(
						mr.Id,
						mr.Title,
						mr.WebUrl,
						mr.CanonId,
						mr.Actors,
						mr.CodeAdditions,
						mr.CodeDeletions,
						mr.ReviewDepth,
						props.MRStatusIconProps,
						mr.LastEventTimestamp,
						mr.CurrentMinimapIndicator,
						mr.Repo,
						generateCircleActors(mr.Actors),
					)
				}
			</ul>
		</div>
	}
}
