// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package template

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func tooltipTemplate() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<template id=\"tooltip-template\"><div class=\"relative overflow-hidden rounded-lg bg-white px-4 py-5 shadow sm:p-6 z-10 min-w-[300px]\"><dt><p class=\"text-sm font-medium text-gray-500\" data-title></p></dt><dd class=\"flex items-center pt-4\"><p class=\"text-3xl font-semibold text-gray-900\" data-value></p><p class=\"text-sm font-medium text-gray-500\" data-subtitle></p></dd></div></template>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func tooltip() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_tooltip_f2d8`,
		Function: `function __templ_tooltip_f2d8(){const svgContainers = document.querySelectorAll('[data-svg-container]');

		const createTooltip = (title, subtitle, value) => {
			const template = document.getElementById("tooltip-template").content.children[0].cloneNode(true);
			template.querySelector("[data-title]").textContent = title;
			template.querySelector("[data-subtitle]").textContent = subtitle;
			template.querySelector("[data-value]").textContent = value;
			return template;
		}

    svgContainers.forEach(svgContainer => {

		const svg = svgContainer.querySelector("svg");
		const svgOverlay = svgContainer.querySelector("[data-svg-overlay]");


		const svgWidth = Number(svg.getBoundingClientRect().width);
		const svgHeight = Number(svg.getBoundingClientRect().height);

        const circles = svg.querySelectorAll('circle');

		const rectWidth = svgWidth / circles.length;
		const rectHeight = rectWidth;

		const hoverCircle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
		hoverCircle.setAttribute("r", Number(circles[0].getAttribute("r"))+3);
		hoverCircle.style.stroke = "blue";
		hoverCircle.style.fill = "white"
		hoverCircle.style.strokeWidth = "1";

		let tooltipElement;

        circles.forEach(c => {
            const circleX = c.getAttribute('cx');
            const circleY = c.getAttribute('cy');

			const rectGroup = document.createElementNS("http://www.w3.org/2000/svg", "g");

            const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
            rect.setAttribute('width', rectWidth);
			rect.setAttribute('height', svgHeight - 20);
            rect.setAttribute('fill', 'red');
            rect.setAttribute('x', circleX - rectWidth / 2);
			rect.setAttribute('y', 20);
            rect.style.opacity = '0';

			rect.style.cursor = 'cursor';

            rectGroup.appendChild(rect);
			svg.appendChild(rectGroup);

			const clearTooltip = () => {
				if (tooltipElement) {
					hoverCircle.remove();
					tooltipElement.remove();
					tooltipElement = undefined;
				}
			}

			svgContainer.addEventListener('mouseleave', ()=>clearTooltip());

			rectGroup.addEventListener('mouseenter', function(event) {

				const dataYValue = c.getAttribute('data-y-value');
				const valueName = c.getAttribute('data-value-name');
				const startDay = c.getAttribute('start-day');
				const endDay = c.getAttribute('end-day');
				clearTooltip();

				tooltipElement = createTooltip(` + "`" + `${startDay} - ${endDay}` + "`" + `, valueName, dataYValue);
				c.parentNode.insertBefore(hoverCircle, c.previousSibling);
				hoverCircle.setAttribute("cx", circleX);
				hoverCircle.setAttribute("cy", circleY);
				svgOverlay.appendChild(tooltipElement);
				const tooltipElementRect = tooltipElement.getBoundingClientRect();
				const svgRect = svg.getBoundingClientRect();
				const halfWidth = tooltipElementRect.width / 2
				let tooltipX = circleX - tooltipElementRect.width / 2;
				let tooltipY = circleY - (tooltipElementRect.height + 12);
				if (tooltipX < 0) tooltipX = 0;
				if ((tooltipX + tooltipElementRect.width) > svgRect.width) tooltipX = svgRect.width - tooltipElementRect.width;
				if (tooltipY < 0) tooltipY = tooltipY + tooltipElementRect.height + 24;
				svgOverlay.setAttribute("style", ` + "`" + `top: ${tooltipY}px; left: ${tooltipX}px` + "`" + `);
			});
        });
    });
}`,
		Call:       templ.SafeScript(`__templ_tooltip_f2d8`),
		CallInline: templ.SafeScriptInline(`__templ_tooltip_f2d8`),
	}
}
