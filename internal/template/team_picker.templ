package template

type Team struct {
	Id   int64
	Name string
	Url  string
}

type TeamPickerProps struct {
	Teams        []Team
	SelectedTeam *int64
	NoTeamUrl    string
}

func getSelectedTeam(props TeamPickerProps) *Team {
	if props.SelectedTeam == nil {
		return &Team{
			Id:   -1,
			Name: "All teams",
			Url:  props.NoTeamUrl,
		}
	}

	for _, team := range props.Teams {
		if team.Id == *props.SelectedTeam {
			return &team
		}
	}

	return &Team{
		Id:   -1,
		Name: "All teams",
		Url:  props.NoTeamUrl,
	}

}

templ teamPickerButton(props TeamPickerProps) {
	<div class="inline-flex divide-x divide-indigo-700 rounded-md shadow-sm">
		<div class="inline-flex items-center gap-x-1.5 rounded-l-md bg-indigo-600 px-3 py-2 text-white shadow-sm">
			<svg class="-ml-0.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
				<path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path>
			</svg>
			<p class="text-sm font-semibold">{ getSelectedTeam(props).Name }</p>
		</div>
		<button
			popovertarget="team-picker-popover"
			type="button"
			class="inline-flex items-center rounded-l-none rounded-r-md bg-indigo-600 p-2 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2 focus:ring-offset-gray-50"
			aria-haspopup="listbox"
			aria-expanded="true"
			aria-labelledby="listbox-label"
		>
			<span class="sr-only">Change team</span>
			<svg class="h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
				<path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path>
			</svg>
		</button>
	</div>
}

templ teamPickerPopoverItem(team Team, selected bool) {
	<li class="text-gray-900 cursor-default select-none p-4 text-sm" id="listbox-option-0" role="option">
		<a href={ templ.SafeURL(team.Url) }>
			<div class="flex flex-col">
				<div class="flex justify-between">
					<p class="font-normal">{ team.Name }</p>
					if selected {
						<span class="text-indigo-600">
							<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
								<path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path>
							</svg>
						</span>
					}
				</div>
			</div>
		</a>
	</li>
}

templ teamPickerPopover(props TeamPickerProps) {
	<ul id="team-picker-popover" popover class="w-72 divide-y divide-gray-200 overflow-hidden rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" tabindex="-1" role="listbox" aria-labelledby="listbox-label" aria-activedescendant="listbox-option-0">
		<li class="text-gray-900 cursor-default select-none p-4 text-sm" id="listbox-option-0" role="option">
			<a href={ templ.SafeURL(props.NoTeamUrl) }>
				<div class="flex flex-col">
					<div class="flex justify-between">
						<p class="font-normal">All teams</p>
						if props.SelectedTeam == nil {
							<span class="text-indigo-600">
								<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
									<path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path>
								</svg>
							</span>
						}
					</div>
					<p class="text-gray-500 mt-2">Displaying metrics from all teams combined.</p>
				</div>
			</a>
		</li>
		for _, team := range props.Teams {
			@teamPickerPopoverItem(team, props.SelectedTeam != nil && team.Id == *props.SelectedTeam)
		}
	</ul>
}

templ newTeamPicker(props TeamPickerProps) {
	@teamPickerButton(props)
	@teamPickerPopover(props)
}

templ teamPicker(props TeamPickerProps) {
	<div class="flex gap-4" id="team-picker">
		for _, team := range props.Teams {
			if props.SelectedTeam != nil && team.Id == *props.SelectedTeam {
				<a
					href={ templ.SafeURL(team.Url) }
				>
					ðŸ”¥{ team.Name }
				</a>
			} else {
				<a
					href={ templ.SafeURL(team.Url) }
				>
					{ team.Name }
				</a>
			}
		}
		if props.SelectedTeam != nil {
			<a
				href={ templ.SafeURL(props.NoTeamUrl) }
			>
				Show all teams
			</a>
		}
	</div>
}
