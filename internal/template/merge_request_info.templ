package template

import (
	"github.com/dxta-dev/app/internal/data"
	"fmt"
	"strings"
	"time"
)

type MergeRequestInfoProps struct {
	Events           [][]data.Event
	UniqueDates      []string
	UniqueAvatarUrls [][]string
	DetailsPageUrl   string
	DeleteEndpoint   string
	TargetSelector   string
}

templ UserInfoBubble(user data.EventUserInfo) {
	<span class="flex overflow-visible items-center gap-1">
		if (user.Id == 1) {
			<div class="inline-block h-6 w-6 rounded-full ring-2 ring-white bg-gray-300"></div>
			<small>&lt;Unknown/&gt;</small>
		} else {
			<img class="inline-block h-6 w-6 rounded-full ring-2 ring-white" src={ fmt.Sprintf(user.AvatarUrl) }/>
			{ strings.Split(user.Name, " ")[0] }
		}
	</span>
}

templ MergeRequestInfo(props MergeRequestInfoProps) {
	<div class="relative z-10" aria-labelledby="mr-info-header" role="dialog" aria-modal="true">
		<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
		<div class="fixed top-20 inset-0 z-10 w-screen">
			<div class="flex h-4/5 items-end justify-center p-4 text-center sm:items-center sm:p-0">
				<div class="relative transform overflow-auto h-full rounded-lg bg-white pt-0 px-4 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-2xl sm:px-6 sm:pb-6">
					<div class="sticky top-0 z-20 h-24 bg-white">
						<div class="flex top-0 h-[60px] p-1 justify-between items-center">
							<div class="pt-4">
								<a href={ templ.URL(props.DetailsPageUrl) } target="_blank" class="inline-block pt-4 p-2">
									<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 2048 2048"><path fill="currentColor" d="M2048 0v1664h-384v384H0V384h384V0zm-128 1536V128H512v256h256v128H128v1408h1408v-640h128v256zm-979-339l-90-90l594-595h-421V384h640v640h-128V603z"></path></svg>
								</a>
							</div>
							<h2 id="mr-info-header" class="pt-20 w-96 text-center text-lg font-semibold leading-6 text-gray-900 mb-10">
								{ fmt.Sprintf("%v", props.Events[0][0].MergeRequestTitle) }
								(<a class="text-blue-600" href={ templ.URL(props.Events[0][0].MergeRequestUrl) } target="_blank">#{ fmt.Sprintf("%v", props.Events[0][0].MergeRequestCanonId) }</a>)
							</h2>
							<div class="pt-4">
								<button
 									hx-trigger="click, keyup[key=='Escape'] from:body"
 									hx-delete={ props.DeleteEndpoint }
 									hx-target={ props.TargetSelector }
 									type="button"
 									class="relative rounded-md text-black-300 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-white"
								>
									<span class="sr-only">Close panel</span>
									<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
										<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
									</svg>
								</button>
							</div>
						</div>
					</div>
					<div class="mt-3 text-center sm:mt-5">
						<div class="flow-root">
							<ul role="list" class="-mb-8">
								<li>
									for i, date := range props.UniqueDates {
										<div class="relative py-8">
											<div class="relative">
												if i != 0 {
													<div class="absolute left-0 top-1/2 h-0.5 w-full bg-gray-300"></div>
													<div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform rounded-lg bg-white px-3 py-1 shadow-md">
														<p class="text-sm text-gray-600">{ fmt.Sprintf("%v", date) }</p>
													</div>
												} else {
													<div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform rounded-lg bg-white px-3 py-1 shadow-md">
														<p class="text-sm text-gray-600">{ fmt.Sprintf("%v", date) }</p>
													</div>
												}
											</div>
											for i, event := range props.Events {
												if time.Unix(event[0].Timestamp/1000, 0).Format("2006-01-02") == date {
													<div class="relative py-8">
														if len(event) == 1 {
															if i < len(props.Events) - 1 {
																<span class="absolute left-5 top-5 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
															}
															<div class="relative flex items-start space-x-3">
																<div class="relative">
																	<img class="flex h-10 w-10 items-center justify-center rounded-full bg-gray-400 ring-8 ring-white" src={ fmt.Sprint(event[0].Actor.AvatarUrl) } alt=""/>
																</div>
																<div class="pr-14 min-w-0 flex-1">
																	<div>
																		<div class="text-sm">
																			<a href={ templ.URL(event[0].Actor.ProfileUrl) } target="_blank" class="font-medium text-gray-900">{ fmt.Sprint(event[0].Actor.Name) }</a>
																		</div>
																	</div>
																	<div class="mt-2 text-sm text-gray-700">
																		<div class="min-w-0 flex-1 py-0">
																			<div class="text-sm leading-8 text-gray-500">
																				if (event[0].HtmlUrl != "") {
																					<a href={ templ.URL(event[0].HtmlUrl) } target="_blank" class="font-medium text-gray-900">
																						<span class="mr-0.5">
																							{ getEventName(event[0].Type) }
																						</span>
																					</a>
																				} else {
																					<span class="mr-0.5">
																						{ getEventName(event[0].Type) }
																					</span>
																				}
																			</div>
																		</div>
																	</div>
																</div>
															</div>
														} else {
															if i < len(props.Events) - 1 {
																<span class="absolute left-5 top-5 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
															}
															<div class="relative flex items-start space-x-3">
																<div class="relative">
																	<dl class="flex w-full flex-none justify-between gap-x-8 sm:w-auto">
																		<div class="flex ">
																			<dt class="sr-only">Commenters</dt>
																			for _, url := range uniqueAvatarUrls(event) {
																				<div class="relative">
																					if len(uniqueAvatarUrls(event)) == 1 {
																						<img class="flex h-10 w-10 items-center justify-center rounded-full bg-gray-400 ring-8 ring-white" src={ url } alt=""/>
																					} else {
																						<dd>
																							<img class="flex h-6 w-6 items-center justify-center rounded-full bg-gray-400 ring-2 ring-white" src={ url } alt=""/>
																						</dd>
																					}
																				</div>
																			}
																		</div>
																	</dl>
																</div>
																<div class="pr-14 min-w-0 flex-1 py-1.5">
																	<div class="text-sm text-gray-500">
																		<a href={ templ.URL(event[0].MergeRequestUrl) } target="_blank" class="font-medium text-gray-900">{ fmt.Sprint(event[0].Actor.Name) }</a>
																		made { fmt.Sprint(len(event)) } actions
																		<details>
																			<summary>Show actions</summary>
																			for _, e := range event {
																				<a href={ templ.URL(e.HtmlUrl) } target="_blank" class="text-sm text-gray-500">
																					<p>{ fmt.Sprint(e.Actor.Name) } { getEventName(e.Type) } at	{ fmt.Sprintf("%v", time.Unix(e.Timestamp / 1000, 0).Format("2006-01-02 15:04:05")) }</p>
																				</a>
																			}
																		</details>
																	</div>
																</div>
															</div>
														}
													</div>
												}
											}
										</div>
									}
								</li>
							</ul>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}
