package template

import (
	"github.com/dxta-dev/app/internal/data"
	"fmt"
	"time"
)

type MergeRequestInfoProps struct {
	Events         [][]data.Event
	UniqueDates    []string
	DetailsPageUrl string
	TargetSelector string
	ShouldOpenMrInfo   bool
}

script ClosePopover() {
	const popover = document.getElementById("mr-info");
	const closeBtn = document.getElementById("mr-info-hide-btn");

	popover.addEventListener("beforetoggle", (event) => {
	const searchParams = new URLSearchParams(document.location.search);
		searchParams.delete("mr");
		params = searchParams.toString();
		window.history.pushState({}, "", `${document.location.pathname}${params.length === 0 ? '' : '?'}${params}`);
	});
}

script ShowMrInfo() {
	const popover = document.getElementById("mr-info");
	popover.showPopover();
}

templ MergeRequestInfo(props MergeRequestInfoProps) {
	<div class="relative z-10" aria-labelledby="mr-info-header" role="dialog" aria-modal="true">
		<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
		<div class="fixed top-20 inset-0 z-10 w-screen">
			<div class="flex h-4/5 items-end justify-center p-4 text-center sm:items-center sm:p-0">
				<div class="relative transform overflow-auto h-full rounded-lg bg-white pt-0 px-4 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-2xl sm:px-6 sm:pb-6">
					if props.ShouldOpenMrInfo {
						@ShowMrInfo()
					}
					MergeRequestHeader(props)
					@MergeRequestDates(props)
				</div>
			</div>
		</div>
	</div>
}

templ MergeRequestHeader(props MergeRequestInfoProps) {
	<div class="sticky top-0 z-20 h-24 bg-white">
		<div class="flex top-0 h-[60px] p-1 justify-between items-center">
			<h2 id="mr-info-header" class="pt-16 w-96 text-center text-lg font-semibold leading-6 text-gray-900 mb-10 mx-auto">
				{ fmt.Sprintf("%v", props.Events[0][0].MergeRequestTitle) }
				(
				<a class="text-blue-600" href={ templ.URL(props.Events[0][0].MergeRequestUrl) } target="_blank">
					#{ fmt.Sprintf("%v", props.Events[0][0].MergeRequestCanonId) }
					<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 128 128" class="inline-block pb-1 w-4 h-4 ml-1">
						<path d="M 84 11 C 82.3 11 81 12.3 81 14 C 81 15.7 82.3 17 84 17 L 106.80078 17 L 60.400391 63.400391 C 59.200391 64.600391 59.200391 66.499609 60.400391 67.599609 C 61.000391 68.199609 61.8 68.5 62.5 68.5 C 63.2 68.5 63.999609 68.199609 64.599609 67.599609 L 111 21.199219 L 111 44 C 111 45.7 112.3 47 114 47 C 115.7 47 117 45.7 117 44 L 117 14 C 117 12.3 115.7 11 114 11 L 84 11 z M 24 31 C 16.8 31 11 36.8 11 44 L 11 104 C 11 111.2 16.8 117 24 117 L 84 117 C 91.2 117 97 111.2 97 104 L 97 59 C 97 57.3 95.7 56 94 56 C 92.3 56 91 57.3 91 59 L 91 104 C 91 107.9 87.9 111 84 111 L 24 111 C 20.1 111 17 107.9 17 104 L 17 44 C 17 40.1 20.1 37 24 37 L 69 37 C 70.7 37 72 35.7 72 34 C 72 32.3 70.7 31 69 31 L 24 31 z"></path>
					</svg>
				</a>)
			</h2>
			<div class="pt-4">
				<button
					type="button"
					id="mr-info-hide-btn"
					class="relative rounded-md text-black-300 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-white inline-block pt-4 p-2"
					popovertarget="mr-info"
					popovertargetaction="hide"
				>
					<span class="sr-only">Close panel</span>
					<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
						<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
				@ClosePopover()
			</div>
		</div>
	</div>
}

templ MergeRequestDates(props MergeRequestInfoProps) {
	<div class="mt-3 text-center sm:mt-5">
		<div class="flow-root">
			<ul role="list" class="-mb-8">
				<li>
					for i, date := range props.UniqueDates {
						<div class="relative py-8">
							<div class="relative">
								if i != 0 {
									<div class="absolute left-0 top-1/2 h-0.5 w-full bg-gray-300"></div>
								}
								<div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform rounded-lg bg-white px-3 py-1 shadow-md">
									<p class="text-sm text-gray-600">{ fmt.Sprintf("%v", date) }</p>
								</div>
							</div>
							@MergeRequestEventsList(props, date)
						</div>
					}
				</li>
			</ul>
		</div>
	</div>
}

templ MergeRequestEventsList(props MergeRequestInfoProps, date string) {
	for i, event := range props.Events {
		if time.Unix(event[0].Timestamp/1000, 0).Format("2006-01-02") == date {
			<div class="relative py-8">
				if i < len(props.Events) - 1 {
					<span class="absolute left-5 top-5 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
				}
				if len(event) == 1 {
					@SingleEvents(event)
				} else {
					@SquashedEvents(event)
				}
			</div>
		}
	}
}

templ SingleEvents(event []data.Event) {
	<div class="relative flex items-start space-x-3">
		<div class="relative">
			<div class="text-smallP text-darkMain dark:text-grayLight font-bold uppercase leading-5 hover:opacity-75 duration-100">
				<img class="flex h-10 w-10 items-center justify-center rounded-full bg-gray-400 ring-8 ring-white" title={ fmt.Sprint(event[0].Actor.Name) } src={ fmt.Sprint(event[0].Actor.AvatarUrl) } alt=""/>
			</div>
		</div>
		<div class="pr-14 min-w-0 flex-1">
			<div>
				<div class="text-sm">
					<a href={ templ.URL(event[0].Actor.ProfileUrl) } target="_blank" class="font-medium text-gray-900">{ fmt.Sprint(event[0].Actor.Name) }</a>
				</div>
			</div>
			<div class="mt-2 text-sm text-gray-700">
				<div class="min-w-0 flex-1 py-0">
					<div class="text-sm leading-8 text-gray-500">
						if (event[0].HtmlUrl != "") {
							<a href={ templ.URL(event[0].HtmlUrl) } target="_blank" class="font-medium text-gray-900">
								<span class="mr-0.5">
									{ getEventName(event[0].Type) }
								</span>
							</a>
						} else {
							<span class="mr-0.5">
								{ getEventName(event[0].Type) }
							</span>
						}
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ SquashedEvents(event []data.Event) {
	<div class="relative flex items-start space-x-3">
		<div class="relative">
			<dl class="flex w-full flex-none justify-between gap-x-8 sm:w-auto">
				<div class="flex ">
					<dt class="sr-only">Commenters</dt>
					for _, actor := range uniqueActorInfo(event) {
						<div class="relative">
							if len(uniqueActorInfo(event)) == 1 {
								<div class="text-smallP text-darkMain dark:text-grayLight font-bold uppercase leading-5 hover:opacity-75 duration-100">
									<img class="flex h-10 w-10 items-center justify-center rounded-full bg-gray-400 ring-8 ring-white" title={ actor.Name } src={ actor.AvatarUrl } alt=""/>
								</div>
							} else {
								<div class="text-smallP text-darkMain dark:text-grayLight font-bold uppercase leading-5 hover:opacity-75 duration-100">
									<dd>
										<img class="flex h-6 w-6 items-center justify-center rounded-full bg-gray-400 ring-2 ring-white" title={ actor.Name } src={ actor.AvatarUrl } alt=""/>
									</dd>
								</div>
							}
						</div>
					}
				</div>
			</dl>
		</div>
		@MergeRequestCodingDiscussions(event)
	</div>
}

templ MergeRequestCodingDiscussions(event []data.Event) {
	<div class="pr-14 min-w-0 flex-1 py-1.5">
		<div class="text-sm text-gray-500">
			<a href={ templ.URL(event[0].MergeRequestUrl) } target="_blank" class="font-medium text-gray-900">
				if getEventName(event[0].Type) == "COMMITTED" {
					CODING
				} else {
					DISCUSSION
				}
			</a>
			<details>
				<summary>Show actions</summary>
				for _, e := range event {
					<a href={ templ.URL(e.HtmlUrl) } target="_blank" class="text-sm text-gray-500">
						<p>{ fmt.Sprint(e.Actor.Name) } { getEventName(e.Type) } at	{ fmt.Sprintf("%v", time.Unix(e.Timestamp / 1000, 0).Format("2006-01-02 15:04:05")) }</p>
					</a>
				}
			</details>
		</div>
	</div>
}
