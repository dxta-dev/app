package template

import (
	"github.com/dxta-dev/app/internal/data"
	"fmt"
	"time"
)

type MergeRequestInfoProps struct {
	Events           [][]data.Event
	UniqueDates      []string
	DetailsPageUrl   string
	TargetSelector   string
	ShouldOpenMrInfo bool
}

script ClosePopover() {
	const popover = document.getElementById("mr-info");

	popover.addEventListener("toggle", (event) => {
		if (event.newState === "closed") {
			const searchParams = new URLSearchParams(document.location.search);
			searchParams.delete("mr");
			params = searchParams.toString();
			window.history.pushState({}, "", `${document.location.pathname}${params.length === 0 ? '' : '?'}${params}`);
			popover.innerHTML = "";
		}
	});

}

script ShowMrInfo() {
	const popover = document.getElementById("mr-info");
	popover.showPopover();
}

templ MergeRequestInfo(props MergeRequestInfoProps) {
	<div class="relative z-10" aria-labelledby="mr-info-header" role="dialog" aria-modal="true">
		<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
		<div class="fixed top-20 inset-0 z-10 w-screen">
			<div class="flex h-4/5 items-end justify-center p-4 text-center sm:items-center sm:p-0">
				<div class="relative transform overflow-auto h-full rounded-lg bg-white pt-0 px-4 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-2xl sm:px-6 sm:pb-6">
					if props.ShouldOpenMrInfo {
						@ShowMrInfo()
					}
					@MergeRequestHeader(props)
					@MergeRequestDates(props)
				</div>
			</div>
		</div>
	</div>
}

templ MergeRequestHeader(props MergeRequestInfoProps) {
	<div class="bg-white sticky top-0 z-20 px-4 py-6 sm:px-6">
		<div class="flex items-start justify-between space-x-3">
			<div class="space-y-1">
				<p class="text-sm text-gray-500">
					<a
						class="flex items-center"
						href={ templ.SafeURL(fmt.Sprintf("https://github.com/%v/%v", props.Events[0][0].Repo.Org, props.Events[0][0].Repo.Name)) }
						target="_blank"
					>
						{ props.Events[0][0].Repo.Org }/{ props.Events[0][0].Repo.Name }
						@OpenInNewTabIcon()
					</a>
				</p>
				<h2 class="text-base font-semibold leading-6 text-gray-900" id="slide-over-title">{ fmt.Sprintf("%v", props.Events[0][0].MergeRequestTitle) }</h2>
				<p class="text-sm text-gray-500">
					<a class="flex items-center" href={ templ.URL(props.Events[0][0].MergeRequestUrl) } target="_blank">
						#{ fmt.Sprintf("%v", props.Events[0][0].MergeRequestCanonId) }
						@OpenInNewTabIcon()
					</a>
				</p>
			</div>
			<div class="flex h-7 items-center">
				<button
					type="button"
					id="mr-info-hide-btn"
					class="relative text-gray-400 hover:text-gray-500"
					popovertarget="mr-info"
					popovertargetaction="hide"
				>
					<span class="absolute -inset-2.5"></span>
					<span class="sr-only">Close panel</span>
					@CrossIcon()
				</button>
				@ClosePopover()
			</div>
		</div>
	</div>
}

templ MergeRequestDates(props MergeRequestInfoProps) {
	<div class="mt-3 text-center sm:mt-5">
		<div class="flow-root">
			<ul role="list" class="-mb-8">
				<li>
					for i, date := range props.UniqueDates {
						<div class="relative py-8">
							<div class="relative">
								if i != 0 {
									<div class="absolute left-0 top-1/2 h-0.5 w-full bg-gray-300"></div>
								}
								<div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform rounded-lg bg-white px-3 py-1 shadow-md">
									<p class="text-sm text-gray-600">{ fmt.Sprintf("%v", date) }</p>
								</div>
							</div>
							@MergeRequestEventsList(props, date)
						</div>
					}
				</li>
			</ul>
		</div>
	</div>
}

templ MergeRequestEventsList(props MergeRequestInfoProps, date string) {
	for i, event := range props.Events {
		if time.Unix(event[0].Timestamp/1000, 0).Format("2006-01-02") == date {
			<div class="relative py-8">
				if i < len(props.Events) - 1 {
					<span class="absolute left-5 top-5 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
				}
				if len(event) == 1 {
					@SingleEvents(event)
				} else {
					@SquashedEvents(event)
				}
			</div>
		}
	}
}

templ SingleEvents(event []data.Event) {
	<div class="relative flex items-start space-x-3">
		<div class="relative">
			<div class="text-smallP text-darkMain dark:text-grayLight font-bold uppercase leading-5">
				<img class="flex h-10 w-10 items-center justify-center rounded-full bg-gray-400 ring-8 ring-white" alt={ event[0].Actor.Name + "'s avatar" } title={ fmt.Sprint(event[0].Actor.Name) } src={ fmt.Sprint(event[0].Actor.AvatarUrl) }/>
			</div>
		</div>
		<div class="pr-14 min-w-0 flex-1">
			<div>
				<div class="text-sm">
					<a href={ templ.URL(event[0].Actor.ProfileUrl) } target="_blank" class="font-medium text-gray-900">{ fmt.Sprint(event[0].Actor.Name) }</a>
				</div>
			</div>
			<div class="mt-2 text-sm text-gray-700">
				<div class="min-w-0 flex-1 py-0">
					<div class="text-sm leading-8 text-gray-500">
						if (event[0].HtmlUrl != "") {
							<a href={ templ.URL(event[0].HtmlUrl) } target="_blank" class="font-medium text-gray-900">
								<span class="mr-0.5">
									{ getEventName(event[0].Type) }
								</span>
							</a>
						} else {
							<span class="mr-0.5">
								{ getEventName(event[0].Type) }
							</span>
						}
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ SquashedEvents(event []data.Event) {
	<div class="relative flex items-start space-x-3">
		<div class="relative">
			<dl class="flex w-full flex-none justify-between gap-x-8 sm:w-auto">
				<div class="flex ">
					<dt class="sr-only">Commenters</dt>
					for _, actor := range uniqueActorInfo(event) {
						<div class="relative">
							if len(uniqueActorInfo(event)) == 1 {
								<div class="text-smallP text-darkMain dark:text-grayLight font-bold uppercase leading-5">
									<img class="flex h-10 w-10 items-center justify-center rounded-full bg-gray-400 ring-8 ring-white" alt={ actor.Name + "'s avatar" } title={ actor.Name } src={ actor.AvatarUrl }/>
								</div>
							} else {
								<div class="text-smallP text-darkMain dark:text-grayLight font-bold uppercase leading-5">
									<dd>
										<img class="flex h-6 w-6 items-center justify-center rounded-full bg-gray-400 ring-2 ring-white" alt={ actor.Name + "'s avatar" } title={ actor.Name } src={ actor.AvatarUrl }/>
									</dd>
								</div>
							}
						</div>
					}
				</div>
			</dl>
		</div>
		@MergeRequestCodingDiscussions(event)
	</div>
}

templ MergeRequestCodingDiscussions(event []data.Event) {
	<div class="pr-14 min-w-0 flex-1 py-1.5">
		<div class="text-sm text-gray-500">
			<a href={ templ.URL(event[0].MergeRequestUrl) } target="_blank" class="font-medium text-gray-900">
				if getEventName(event[0].Type) == "COMMITTED" {
					CODING
				} else {
					DISCUSSION
				}
			</a>
			<details>
				<summary>Show actions</summary>
				for _, e := range event {
					<a href={ templ.URL(e.HtmlUrl) } target="_blank" class="text-sm text-gray-500">
						<p>{ fmt.Sprint(e.Actor.Name) } { getEventName(e.Type) } at	{ fmt.Sprintf("%v", time.Unix(e.Timestamp / 1000, 0).Format("2006-01-02 15:04:05")) }</p>
					</a>
				}
			</details>
		</div>
	</div>
}
