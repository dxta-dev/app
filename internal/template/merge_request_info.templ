package template

import (
	"github.com/dxta-dev/app/internal/data"

	"fmt"
	"time"
	"strings"
)

type MergeRequestInfoProps struct {
	Events         [][]data.Event
	DeleteEndpoint string
	TargetSelector string
}

templ UserInfoBubble(user data.EventUserInfo) {
	<span class="flex overflow-visible items-center gap-1">
		if (user.Id == 1) {
			<div class="inline-block h-6 w-6 rounded-full ring-2 ring-white bg-gray-300"></div>
			<small>&lt;Unknown/&gt;</small>
		} else {
			<img class="inline-block h-6 w-6 rounded-full ring-2 ring-white" src={ fmt.Sprintf(user.AvatarUrl) }/>
			{ strings.Split(user.Name, " ")[0] }
		}
	</span>
}

templ MergeRequestInfo(props MergeRequestInfoProps) {
	<div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">
		<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
		<div class="fixed inset-0 z-10 w-screen">
			<div class="flex h-4/5 items-end justify-center p-4 text-center sm:items-center sm:p-0">
				<div class="relative transform overflow-auto h-full rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-2xl sm:p-6">
					<div>
						<div class="flex justify-between items-center mb-10">
							<div>
								<a href={ templ.URL(props.DeleteEndpoint + "/details") } class="inline-block p-2">
									<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 hover:stroke-gray-500">
										<path stroke-linecap="round" stroke-linejoin="round" d="M3.75 3.75v4.5m0-4.5h4.5m-4.5 0L9 9M3.75 20.25v-4.5m0 4.5h4.5m-4.5 0L9 15M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15"></path>
									</svg>
									<span></span>
								</a>
							</div>
							<div>
								<button
 									hx-trigger="click, keyup[key=='Escape'] from:body"
 									hx-delete={ props.DeleteEndpoint }
 									hx-target={ props.TargetSelector }
 									type="button"
 									class="relative rounded-md text-black-300 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-white"
								>
									<span class="sr-only">Close panel</span>
									<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
										<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
									</svg>
								</button>
							</div>
						</div>
						<div class="mt-3 text-center sm:mt-5">
							<h2 class="text-lg font-semibold leading-6 text-gray-900 mb-10" id="slide-over-title">
								{ fmt.Sprintf("%v", props.Events[0][0].MergeRequestTitle) }
								(<a class="text-blue-600" href={ templ.URL(props.Events[0][0].MergeRequestUrl) } target="_blank">#{ fmt.Sprintf("%v", props.Events[0][0].MergeRequestCanonId) }</a>)
							</h2>
							<div class="flow-root">
								<ul role="list" class="-mb-8">
									<li>
										for _, event := range props.Events {
											<div class="relative pb-8">
												if len(event) <= 1 {
													for _, e := range event {
														<span class="absolute left-5 top-5 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
														<div class="relative flex items-start space-x-3">
															<div class="relative">
																<img class="flex h-10 w-10 items-center justify-center rounded-full bg-gray-400 ring-8 ring-white" src={ fmt.Sprint(e.Actor.AvatarUrl) } alt=""/>
															</div>
															<div class="min-w-0 flex-1">
																<div>
																	<div class="text-sm">
																		<a href={ templ.URL(e.Actor.ProfileUrl) } target="_blank" class="font-medium text-gray-900">{ fmt.Sprint(e.Actor.Name) }</a>
																	</div>
																</div>
																<div class="mt-2 text-sm text-gray-700">
																	<div class="min-w-0 flex-1 py-0">
																		<div class="text-sm leading-8 text-gray-500">
																			<span class="mr-0.5">
																				{ getEventName(e.Type) } at
																			</span>
																		</div>
																		<span class="mr-0.5">
																			<p class="inline-flex items-center gap-x-1.5 rounded-full px-2 py-1 text-xs font-medium text-gray-900 ring-1 ring-inset ring-gray-200">
																				<svg class="h-1.5 w-1.5 fill-red-500" viewBox="0 0 6 6" aria-hidden="true">
																					<circle cx="3" cy="3" r="3"></circle>
																				</svg>
																				{ fmt.Sprintf("%v", time.Unix(e.Timestamp / 1000, 0).Format("2006-01-02 15:04:05")) }
																			</p>
																		</span>
																	</div>
																</div>
															</div>
														</div>
													}
												} else {
													<span class="absolute left-5 top-5 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
													<div class="relative flex items-start space-x-3">
														<div>
															<div class="relative px-1">
																<div class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 ring-8 ring-white">
																	<svg class="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
																		<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-5.5-2.5a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0zM10 12a5.99 5.99 0 00-4.793 2.39A6.483 6.483 0 0010 16.5a6.483 6.483 0 004.793-2.11A5.99 5.99 0 0010 12z" clip-rule="evenodd"></path>
																	</svg>
																</div>
															</div>
														</div>
														<div class="min-w-0 flex-1 py-1.5">
															<div class="text-sm text-gray-500">
																<a href={ templ.URL(event[0].MergeRequestUrl) } target="_blank" class="font-medium text-gray-900">{ fmt.Sprint(event[0].Actor.Name) }</a>
																made { fmt.Sprint(len(event)) } actions between
																<span class="mr-0.5">
																	<p class="inline-flex items-center gap-x-1.5 rounded-full px-2 py-1 text-xs font-medium text-gray-900 ring-1 ring-inset ring-gray-200">
																		<svg class="h-1.5 w-1.5 fill-red-500" viewBox="0 0 6 6" aria-hidden="true">
																			<circle cx="3" cy="3" r="3"></circle>
																		</svg>
																		{ fmt.Sprintf("%v", time.Unix(event[0].Timestamp / 1000, 0).Format("2006-01-02 15:04:05")) }
																	</p>
																</span>
																<span class="mr-0.5">
																	<p class="inline-flex items-center gap-x-1.5 rounded-full px-2 py-1 text-xs font-medium text-gray-900 ring-1 ring-inset ring-gray-200">
																		<svg class="h-1.5 w-1.5 fill-red-500" viewBox="0 0 6 6" aria-hidden="true">
																			<circle cx="3" cy="3" r="3"></circle>
																		</svg>
																		{ fmt.Sprintf("%v", time.Unix(event[len(event) - 1].Timestamp / 1000, 0).Format("2006-01-02 15:04:05")) }
																	</p>
																</span>
																<details>
																	<summary>Show actions</summary>
																	for _, e := range event {
																	<p>{ fmt.Sprint(e.Actor.Name) } { getEventName(e.Type) } at	{ fmt.Sprintf("%v", time.Unix(event[len(event) - 1].Timestamp / 1000, 0).Format("2006-01-02 15:04:05")) }</p>
																	}
																</details>
															</div>
														</div>
													</div>
												}
											</div>
										}
									</li>
								</ul>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}
