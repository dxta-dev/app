package template

import (
	"fmt"
)

func GetDefaultNavState() NavState {
	return NavState{
		Root: "/",
		Metrics: struct {
			Quality    string
			Throughput string
		}{
			Quality:    "/metrics/quality",
			Throughput: "/metrics/throughput",
		},
	}
}

type NavState struct {
	Root    string
	Metrics struct {
		Quality    string
		Throughput string
	}
}

type Page struct {
	RouteId   string
	Title     string
	Boosted   bool
	Requested bool
	CacheBust string
	DebugMode bool
	NavState  NavState
	Nonce     string
}

templ Layout(page *Page, props TeamPickerProps) {
	<html>
		@Head(page.Title, page.CacheBust, page.Nonce)
		<body>
			if page.DebugMode {
				@DebugInfoPopover(page)
			}
			<div id="app">
				@NewNavigation(page, props)
				@Content(page) {
					{ children... }
				}
			</div>
		</body>
	</html>
}

templ Head(title string, bust string, nonce string) {
	<head>
		<meta charset="UTF-8"/>
		<title>{ title }</title>
		<script nonce={ nonce } src="https://unpkg.com/htmx.org@2.0.0/dist/htmx.min.js"></script>
		<script nonce={ nonce } src="https://unpkg.com/htmx-ext-head-support@2.0.0/head-support.js"></script>
		<link href={ fmt.Sprintf("/style.css?t=%s", bust) } rel="stylesheet"/>
	</head>
}

templ Content(page *Page) {
	<main class="lg:pl-20">
		<div class="px-4 py-10 sm:px-6 lg:px-8 lg:py-6">
			<div class="max-w-[1440px] mx-auto">
				<!-- Main area -->
				{ children... }
			</div>
		</div>
	</main>
}

func GetClassStateOfNewNavigationSidebarLink(page *Page, routeId string) string {
	if page.RouteId == routeId {
		return "bg-gray-800 text-white"
	}
	return "text-gray-400 hover:text-white hover:bg-gray-800"
}

templ NewNavigationSidebarLink(page *Page, routeId string, routeURL string, routeName string, content templ.Component) {
	<li>
		<a
			href={ templ.SafeURL(routeURL) }
			class={ fmt.Sprintf("%s group flex gap-x-3 rounded-md p-3 text-sm leading-6 font-semibold", GetClassStateOfNewNavigationSidebarLink(page, routeId)) }
		>
			@content
			<span class="sr-only">{ routeName }</span>
		</a>
	</li>
}

templ NewNavigation(page *Page, props TeamPickerProps) {
	<!-- Static sidebar for desktop -->
	<div class="hidden lg:fixed lg:inset-y-0 lg:left-0 lg:z-50 lg:block lg:w-20 lg:overflow-y-auto lg:bg-gray-900 lg:pb-4">
		<div class="flex h-16 shrink-0 items-center justify-center">
			<!-- logo goes here -->
		</div>
		if page.DebugMode {
			@DebugInfoTrigger()
		}
		<nav
			hx-boost="true"
			hx-target="#app"
			hx-swap="innerHTML show:unset"
			class="mt-8"
		>
			<ul role="list" class="flex flex-col items-center space-y-1">
				@NewNavigationSidebarLink(page, "/", page.NavState.Root, "Dashboard", DashboardIcon(SVGProps{Width: 32, Height: 32}))
				@NewNavigationSidebarLink(page, "/metrics/quality", page.NavState.Metrics.Quality, "Quality Metrics", templ.Raw("Q"))
				@NewNavigationSidebarLink(page, "/metrics/throughput", page.NavState.Metrics.Throughput, "Throughpu Metrics", templ.Raw("T"))
			</ul>
		</nav>
	</div>
	@teamPicker(props)
}

