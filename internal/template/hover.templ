package template

script tooltip() {

	function formatValue(value) {
		var absNumber = Math.abs(value);
		var formatted = "";

		switch (true) {
			case absNumber < 1000:
				if (Number.isInteger(value)) {
					formatted = value.toFixed(0);
				} else {
					formatted = value.toFixed(1);
				}
				break;
			case absNumber >= 1000 && absNumber < 1000000:
				formatted = (value / 1000).toFixed(1) + 'K';
				break;
			case absNumber >= 1000000:
				formatted = (value / 1000000).toFixed(1) + 'M';
				break;
			default:
				formatted = value.toString();
		}

		if (formatted.length < 5) {
			formatted += '\u00a0'.repeat(5 - formatted.length);
		}

		return formatted;
	}

	function getStartEndWeek(yw) {
		const parts = yw.split("-W");
		if (parts.length !== 2) {
			throw new Error("Invalid format");
		}

		const year = parseInt(parts[0], 10);
		const week = parseInt(parts[1], 10);

		const firstDayOfYear = new Date(year, 0, 1);

		if (firstDayOfYear.getDay() !== 1) {
			for (let i = 1; i < 4; i++) {
				const p = new Date(year, 0, 1 - i);
				const n = new Date(year, 0, 1 + i);

				if (p.getDay() === 1) {
					firstDayOfYear.setTime(p.getTime());
					break;
				}

				if (n.getDay() === 1) {
					firstDayOfYear.setTime(n.getTime());
					break;
				}
			}
		}

		const startOfWeek = new Date(firstDayOfYear.getTime() + (week - 1) * 7 * 24 * 60 * 60 * 1000);
		const endOfWeek = new Date(startOfWeek.getTime() + 6 * 24 * 60 * 60 * 1000);

		if (startOfWeek.getFullYear() > year) {
			throw new Error("Invalid week");
		}

		return [startOfWeek, endOfWeek];
	}

	const parent = document.currentScript.parentNode;
	const svg = parent.querySelector('svg');
	const circles = parent.querySelectorAll('svg > circle');

	circles.forEach((c, i) => {
		const circleRect = c.getBoundingClientRect();

		const rect = document.createElement('div');
		rect.style.position = 'absolute';
		rect.style.width = '50px';
		rect.style.height = '60px';
		rect.style.background = 'red';
		rect.style.transform = 'translate(-50%, -50%)';

		const centerX = circleRect.left + circleRect.width / 2;
		const centerY = circleRect.top + circleRect.height / 2;

		rect.style.left = centerX + 'px';
		rect.style.top = centerY + 'px';
		rect.style.opacity = '0';

		document.body.appendChild(rect);

		rect.addEventListener('mouseenter', function(event) {
			const tooltip = document.createElement('div');
			const dataYValue = parseFloat(c.getAttribute('data-y-value'));
			const formattedYValue = formatValue(dataYValue);
			const week = c.getAttribute('data-week');
			const valueName = c.getAttribute('data-value-name');
			const startEndWeek = getStartEndWeek(week);


			tooltip.textContent = formattedYValue === 0 ? 'No Data' : valueName + ': ' + formattedYValue;
			const weekText = document.createElement('div');
			weekText.textContent = startEndWeek[0].toLocaleDateString('en-US', {day: '2-digit', month: 'short', year: 'numeric'})
								+ '-'
								+ startEndWeek[1].toLocaleDateString('en-US', {day: '2-digit', month: 'short', year: 'numeric'});
			tooltip.appendChild(weekText);

			tooltip.style.position = 'absolute';
			tooltip.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
			tooltip.style.color = '#fff';
			tooltip.style.padding = '5px';
			tooltip.style.borderRadius = '5px';

			tooltip.style.top = centerY + window.scrollY - tooltip.offsetHeight + 'px';
			tooltip.style.left = centerX + window.scrollX + 'px';

			document.body.appendChild(tooltip);

			rect.addEventListener('mouseleave', function() {
				tooltip.remove();
			});
		});
	});
}

