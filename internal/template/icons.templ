package template

import (
	"fmt"
)

type SVGProps struct {
	Id            string
	Width, Height int
}

type MRStatus int

const (
	WaitingToBeReviewed MRStatus = iota
	ReadyToBeMerged
	InProgress
	Merged
	Closed
	Stale
)

type MRStatusIconProps struct {
	SVGProps
	MRStatus
}

templ UseMRStatusIcon(props MRStatusIconProps) {
	<svg
		if props.SVGProps.Height != 0 {
			height={ fmt.Sprintf("%d", props.SVGProps.Height) }
		}
		if props.SVGProps.Width != 0 {
			width={ fmt.Sprintf("%d", props.SVGProps.Width) }
		}
	>
		<use href={ "#" + props.SVGProps.Id }></use>
	</svg>
}

templ MRStatusIcon(props MRStatusIconProps) {
	<svg
		xmlns="http://www.w3.org/2000/svg"
		if props.SVGProps.Height != 0 {
			height={ fmt.Sprintf("%d", props.SVGProps.Height) }
		}
		if props.Width != 0 {
			width={ fmt.Sprintf("%d", props.SVGProps.Width) }
		}
		if props.Id != "" {
			id={ props.Id }
		}
		if props.MRStatus == WaitingToBeReviewed {
			class="text-green-600"
		}
		if props.MRStatus == ReadyToBeMerged {
			class="text-lime-600"
		}
		if props.MRStatus == InProgress {
			class="text-blue-600"
		}
		if props.MRStatus == Merged {
			class="text-violet-600"
		}
		if props.MRStatus == Closed {
			class="text-red-600"
		}
		if props.MRStatus == Stale {
			class="text-gray-600"
		}
		fill="currentColor"
		viewBox="0 0 16 16"
	>
		<path
			if props.MRStatus == WaitingToBeReviewed {
				d="M1.5 3.25a2.25 2.25 0 1 1 3 2.122v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.25 2.25 0 0 1 1.5 3.25Zm5.677-.177L9.573.677A.25.25 0 0 1 10 .854V2.5h1A2.5 2.5 0 0 1 13.5 5v5.628a2.251 2.251 0 1 1-1.5 0V5a1 1 0 0 0-1-1h-1v1.646a.25.25 0 0 1-.427.177L7.177 3.427a.25.25 0 0 1 0-.354ZM3.75 2.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm0 9.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm8.25.75a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Z"
			}
			if props.MRStatus == ReadyToBeMerged {
				d="M3.75 4.5a1.25 1.25 0 1 0 0-2.5 1.25 1.25 0 0 0 0 2.5ZM3 7.75a.75.75 0 0 1 1.5 0v2.878a2.251 2.251 0 1 1-1.5 0Zm.75 5.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm5-7.75a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Zm5.75 2.5a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Zm-1.5 0a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"
			}
			if props.MRStatus == InProgress {
				d="M11.93 8.5a4.002 4.002 0 0 1-7.86 0H.75a.75.75 0 0 1 0-1.5h3.32a4.002 4.002 0 0 1 7.86 0h3.32a.75.75 0 0 1 0 1.5Zm-1.43-.75a2.5 2.5 0 1 0-5 0 2.5 2.5 0 0 0 5 0Z"
			}
			if props.MRStatus == Merged {
				d="M5.45 5.154A4.25 4.25 0 0 0 9.25 7.5h1.378a2.251 2.251 0 1 1 0 1.5H9.25A5.734 5.734 0 0 1 5 7.123v3.505a2.25 2.25 0 1 1-1.5 0V5.372a2.25 2.25 0 1 1 1.95-.218ZM4.25 13.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm8.5-4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5ZM5 3.25a.75.75 0 1 0 0 .005V3.25Z"
			}
			if props.MRStatus == Closed {
				d="M3.25 1A2.25 2.25 0 0 1 4 5.372v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.251 2.251 0 0 1 3.25 1Zm9.5 5.5a.75.75 0 0 1 .75.75v3.378a2.251 2.251 0 1 1-1.5 0V7.25a.75.75 0 0 1 .75-.75Zm-2.03-5.273a.75.75 0 0 1 1.06 0l.97.97.97-.97a.748.748 0 0 1 1.265.332.75.75 0 0 1-.205.729l-.97.97.97.97a.751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018l-.97-.97-.97.97a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734l.97-.97-.97-.97a.75.75 0 0 1 0-1.06ZM2.5 3.25a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0ZM3.25 12a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm9.5 0a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Z"
			}
			if props.MRStatus == Stale {
				d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm7-3.25v2.992l2.028.812a.75.75 0 0 1-.557 1.392l-2.5-1A.751.751 0 0 1 7 8.25v-3.5a.75.75 0 0 1 1.5 0Z"
			}
		></path>
	</svg>
}

templ Cross() {
	<svg
		xmlns="http://www.w3.org/2000/svg"
		width="24"
		height="24"
		fill="none"
		stroke="currentColor"
		stroke-width="2"
		stroke-linecap="round"
		stroke-linejoin="round"
		viewBox="0 0 24 24"
	>
		<line x1="18" y1="6" x2="6" y2="18"></line>
		<line x1="6" y1="6" x2="18" y2="18"></line>
	</svg>
}

type Direction int

const (
	Up Direction = iota
	Down
	Left
	Right
)

templ Chevron(direction Direction) {
	<svg
		xmlns="http://www.w3.org/2000/svg"
		width="16"
		height="16"
		viewBox="0 0 24 24"
		fill="none"
		stroke="currentColor"
		stroke-width="2"
		stroke-linecap="round"
		stroke-linejoin="round"
	>
		<path
			if direction == Up {
				d="M18 15l-6-6-6 6"
			}
			else
			if direction == Down {
				d="M6 9l6 6 6-6"
			}
			else
			if direction == Left {
				d="m15 18-6-6 6-6"
			}
			else
			if direction == Right {
				d="m9 6 6 6-6 6"
			}
		></path>
	</svg>
}

templ Checkmark() {
	<svg
		xmlns="http://www.w3.org/2000/svg"
		viewBox="0 0 24 24"
		width="24"
		height="24"
		fill="currentColor"
		stroke="currentColor"
		stroke-width="1"
		stroke-linecap="round"
		stroke-linejoin="round"
	>
		<path
			d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"
		></path>
	</svg>
}

templ UseDashboardIcon(props SVGProps) {
	<svg
		if props.Height != 0 {
			height={ fmt.Sprintf("%d", props.Height) }
		}
		if props.Width != 0 {
			width={ fmt.Sprintf("%d", props.Width) }
		}
	>
		<use href={ "#" + props.Id }></use>
	</svg>
}

templ DashboardIcon(props SVGProps) {
	<svg
		if props.Height != 0 {
			height={ fmt.Sprintf("%d", props.Height) }
		}
		if props.Width != 0 {
			width={ fmt.Sprintf("%d", props.Width) }
		}
		if props.Id != "" {
			id={ props.Id }
		}
		viewBox="0 0 24 24"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
	>
		<circle cx="6" cy="6" r="4" fill="#4CAF50"></circle>
		<circle cx="18" cy="6" r="4" fill="#2196F3"></circle>
		<circle cx="6" cy="18" r="4" fill="#FFC107"></circle>
		<circle cx="18" cy="18" r="4" fill="#F44336"></circle>
		<line x1="4" y1="0" x2="4" y2="24" stroke="white" stroke-width="1"></line>
		<line y1="20" x2="24" y2="20" stroke="white" stroke-width="1"></line>
		<line x1="20" y1="0" x2="20" y2="24" stroke="white" stroke-width="1"></line>
		<line y1="4" x2="24" y2="4" stroke="white" stroke-width="1"></line>
	</svg>
}
