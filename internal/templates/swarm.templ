package templates

import (
	"time"
	"dxta-dev/app/internal/data"
	"fmt"


)

type SwarmProps struct {
	Series         SwarmSeries
	StartOfTheWeek time.Time
}


script getChart() {
    const svg = document.querySelector("#swarm-chart > svg");
    const circles = document.querySelectorAll("#swarm-chart > svg > circle");
    function moveToTop(element) {
        element.parentNode.appendChild(element);
    }
    const createdCircles = [];

    const deselectCircles = () => {
        createdCircles.forEach(entry => {
            svg.removeChild(entry.circle);
            entry.original.removeAttribute("data-clicked");
        });
        createdCircles.length = 0;
    };

    const cs = [...circles].map(c => {
        c.onclick = () => {
            const isClicked = c.getAttribute("data-clicked") === "true";

            deselectCircles();

            if (!isClicked) {
                const newCircle = createCircle(c.getAttribute("cx"), c.getAttribute("cy"), +c.getAttribute("r") + 3, "white", "red", 1);
                svg.appendChild(newCircle);
                moveToTop(c);
                c.setAttribute("data-clicked", "true");
                createdCircles.push({ circle: newCircle, original: c });
            }
			const isClickedValue = isClicked ? "true" : "false";
			const currURL = window.location.href;
			const endpoint = currURL.split("3000");

			htmx.ajax('GET', endpoint[1], {
				headers: {
					'IsClicked': isClickedValue,
				},
				target: '#circle-info-container',
				swap: 'innerHTML'
			}).then(() => {
				console.log("htmx response:", isClickedValue);
			});
			};
        return {
            circle: c,
            cx: c.getAttribute("cx"),
            cy: c.getAttribute("cy"),
            r: c.getAttribute("r"),
            fill: c.getAttribute("fill"),
            stroke: c.getAttribute("stroke"),
            strokeWidth: c.getAttribute("stroke-width"),
            opacity: c.getAttribute("opacity"),
            data: c.getAttribute("data"),
        };
    });
    const createCircle = (cx, cy, r, fill, stroke, strokeWidth) => {
        const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
        circle.setAttribute("cx", cx);
        circle.setAttribute("cy", cy);
        circle.setAttribute("r", r);
        circle.setAttribute("fill", fill);
        circle.setAttribute("stroke", stroke);
        circle.setAttribute("stroke-width", strokeWidth);
        return circle;
    };
}


templ circleInfo(eventInfo []data.Event) {
        <div id="circle-info-container">
            <p>Clicked!</p>
            for _, metric := range eventInfo {
                <pre>{ fmt.Sprintf("%v", metric) }</pre>
            }
        </div>
}


templ swarm(props SwarmProps) {
		<div class="flex items-center justify-center" id="swarm-chart">
			<style text="text/css">
				svg > circle:hover {
					cursor: pointer;
				}
			</style>
			@swarmChartComponent(props.Series, props.StartOfTheWeek)
			@getChart()
		</div>
}
