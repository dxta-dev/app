package templates

import (
	"time"
	"dxta-dev/app/internal/data"
	"fmt"


)

type SwarmProps struct {
	Series         SwarmSeries
	StartOfTheWeek time.Time
	EventIds	[]int64
}


script getChart(chartId string, endpoint string, circleIds []int64) {

	if (circleIds === null) {
		return;
	}

	const svg = document.querySelector(`${chartId} > svg`);
    const circles = document.querySelectorAll(`${chartId} > svg > circle`);


    function moveToTop(element) {
        element.parentNode.appendChild(element);
    }

	function getCircleInfo(circleId) {
		const paramsString = document.location.search;
		const searchParams = new URLSearchParams(paramsString);
	    searchParams.set('event', circleId);
		const url = new URL(`${endpoint}?${searchParams.toString()}`, document.location.origin);
		htmx.ajax('GET', url.toString(), 'main')
	}

	const redCircle = document.createElementNS("http://www.w3.org/2000/svg", "circle");

	redCircle.setAttribute("fill", "white");
	redCircle.setAttribute("stroke", "red");
	redCircle.setAttribute("stroke-width", "1");
	redCircle.setAttribute("r", +circles[0].getAttribute("r") + 3);

	const searchParams = new URLSearchParams(document.location.search);
	const eventId = searchParams.get('event');

	for (let i = 0; i < circles.length; i++) {
		circles[i].setAttribute("data-id", circleIds[i]);
		if (Number(eventId) === circleIds[i]) {
			redCircle.setAttribute("cx", circles[i].getAttribute("cx"));
			redCircle.setAttribute("cy", circles[i].getAttribute("cy"));
			svg.appendChild(redCircle);
			moveToTop(redCircle);
			moveToTop(circles[i]);
		}
	}

	circles.forEach((circle, i) => {
		circle.addEventListener("click", (e) => {
			redCircle.setAttribute("cx", circle.getAttribute("cx"));
			redCircle.setAttribute("cy", circle.getAttribute("cy"));
			if(!redCircle.parentNode) {
				svg.appendChild(redCircle);
			}
			moveToTop(redCircle);
			moveToTop(circle);
			getCircleInfo(Number(circle.getAttribute("data-id")));

		})
	});
}


templ circleInfo(eventInfo data.Event) {
	<div class="relative z-10" aria-labelledby="slide-over-title" role="dialog" aria-modal="true">
			<div class="fixed inset-0 overflow-hidden">
				<div class="absolute inset-0 overflow-hidden">
					<div class="pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10">
						<div class="pointer-events-auto relative w-screen max-w-md">
							<div class="absolute right-0 top-0 -ml-8 flex pr-2 pt-4 sm:-ml-10 sm:pr-4">
								<button type="button" class="relative rounded-md text-gray-300 hover:text-black focus:outline-none focus:ring-2 focus:ring-white">
									<span class="absolute -inset-2.5"></span>
									<span class="sr-only">Close panel</span>
									<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
										<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
									</svg>
								</button>
							</div>

							<div class="flex h-48 flex-col bg-white py-6 shadow-xl">
								<div class="px-4 sm:px-6">
									<h2 class="text-base font-semibold leading-6 text-gray-900" id="slide-over-title">{ fmt.Sprintf("%v", eventInfo.MergeRequest) }</h2>
								</div>
							<div class="relative mt-6 flex-1 px-4 sm:px-6 overflow-hidden">
								<div id="circle-info-container">
									<pre>Author: { fmt.Sprintf("%v", eventInfo.Actor) }</pre>
									<a class="text-blue-600" href={ templ.URL(eventInfo.MergeRequestUrl) }>{ fmt.Sprintf("%v", eventInfo.MergeRequest) }</a>
									<pre>Time: { fmt.Sprintf("%v", time.Unix(eventInfo.Timestamp / 1000, 0)) }</pre>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script>

	</script>
}


templ swarm(props SwarmProps) {
		<div class="flex items-center justify-center" id="swarm-chart">
			<style text="text/css">
				svg > circle:hover {
					cursor: pointer;
				}
			</style>
			@swarmChartComponent(props.Series, props.StartOfTheWeek)
			@getChart("#swarm-chart", "dashboard", props.EventIds)
		</div>
}
